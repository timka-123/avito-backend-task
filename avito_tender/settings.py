"""
Django settings for avito_tender project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import psycopg2

from os import environ
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e8mey$@kzqpya+g*^md6&na*zz0(9s*j@#t-a8$6ypox_s%=ej'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = environ.get("DEBUG", False)

ALLOWED_HOSTS = ['cnrprod1725726830-team-78345-32801.avito2024.codenrock.com', 'localhost']

# я не смог написать миграции, поэтому да здравствуют костыли
conn = psycopg2.connect(environ.get("POSTGRES_CONN", "postgres://postgres:postgres@localhost:5432/avito"))
cur = conn.cursor()
# core database
cur.execute("""CREATE TABLE IF NOT EXISTS employee (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    username VARCHAR(50) UNIQUE NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);""")
cur.execute("""DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'organization_type') THEN
        CREATE TYPE organization_type AS ENUM ('IE', 'LLC', 'JSC');
    END IF;
END $$;

CREATE TABLE IF NOT EXISTS organization (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    type organization_type,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS organization_responsible (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    organization_id UUID REFERENCES organization(id) ON DELETE CASCADE,
    user_id UUID REFERENCES employee(id) ON DELETE CASCADE
);""")

# tenders
cur.execute("""create table if not exists tenders_tender
(
    id                  uuid                     not null
        primary key,
    name                varchar(100)             not null,
    description         text                     not null,
    "serviceType"       varchar                  not null,
    status              varchar                  not null,
    version             integer                  not null,
    "createdAt"         timestamp with time zone not null,
    "organizationId_id" uuid                     not null
        constraint "tenders_tender_organizationId_id_987d46b4_fk_organization_id"
            references organization
            deferrable initially deferred,
    owner_id            uuid                     not null
        constraint tenders_tender_owner_id_c6d256d0_fk_employee_id
            references employee
            deferrable initially deferred
);""")
print("created tenders")
cur.execute("""create table if not exists tenders_tenderhistory
(
    id                  uuid                     not null
        primary key,
    tender_id           uuid                     not null,
    name                varchar(100)             not null,
    description         text                     not null,
    "serviceType"       varchar                  not null,
    status              varchar                  not null,
    version             integer                  not null,
    "createdAt"         timestamp with time zone not null,
    "organizationId_id" uuid                     not null
        constraint "tenders_tenderhistor_organizationId_id_64ac1400_fk_organizat"
            references organization
            deferrable initially deferred,
    owner_id            uuid                     not null
        constraint tenders_tender_owner_id_c6d256d0_fk_employee_id
            references employee
            deferrable initially deferred
);""")
print("created tenders history")

# bids
cur.execute("""create table if not exists bids_bid
(
    id            uuid                     not null
        primary key,
    name          varchar(100)             not null,
    description   text                     not null,
    status        varchar                  not null,
    "authorType"  varchar                  not null,
    version       integer default 1        not null,
    "createdAt"   timestamp with time zone not null,
    "authorId_id" uuid                     not null
        constraint "bids_bid_authorId_id_6e629b77_fk_employee_id"
            references employee
            deferrable initially deferred,
    "tenderId_id" uuid                     not null
        constraint "bids_bid_tenderId_id_5dc6e1e7_fk_tenders_tender_id"
            references tenders_tender
            deferrable initially deferred,
    approved_count integer default 0        not null
);""")
cur.execute("""CREATE TABLE if not exists bid_reviews (
    id UUID PRIMARY KEY,
    feedback TEXT NOT NULL,
    bid_id uuid not null constraint "bid_reviews_bid_id_id_6e629b77_fk_bods_bid_id" references bids_bid deferrable initially deferred,
    user_id uuid                     not null
        constraint "bid_reviews_user_id_id_6e629b77_fk_employee_id"
            references employee
            deferrable initially deferred,
    FOREIGN KEY (bid_id) REFERENCES bids_bid(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES "employee"(id) ON DELETE CASCADE
);""")
cur.execute("""CREATE TABLE if not exists bid_history (
    id uuid not null primary key,
    bid_id            uuid                     not null,
    name          varchar(100)             not null,
    description   text                     not null,
    status        varchar                  not null,
    "authorType"  varchar                  not null,
    version       integer default 1        not null,
    "createdAt"   timestamp with time zone not null,
    "authorId_id" uuid                     not null
        constraint "bids_bid_authorId_id_6e629b77_fk_employee_id"
            references employee
            deferrable initially deferred,
    "tenderId_id" uuid                     not null
        constraint "bids_bid_tenderId_id_5dc6e1e7_fk_tenders_tender_id"
            references tenders_tender
            deferrable initially deferred,
    approved_count integer default 0        not null
);""")
print("created bids")
conn.commit()
cur.close()
conn.close()


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    'core',
    'tenders',
    'bids'
]

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    "EXCEPTION_HANDLER": "core.other.custom_exception_handler"
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'avito_tender.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'avito_tender.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': environ.get("POSTGRES_DATABASE", "avito"),
        'USER': environ.get("POSTGRES_USERNAME", "postgres"),
        'PASSWORD': environ.get("POSTGRES_PASSWORD", "postgres"),
        'HOST': environ.get("POSTGRES_HOST", "localhost"),
        'PORT': environ.get("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
